# Cloud Build configuration file for dual application deployment
steps:
  # Determine which services to deploy
  - name: 'gcr.io/cloud-builders/git'
    id: check-changes
    entrypoint: 'bash'
    args:
      - '-c'
      - 'echo "true" > /workspace/deploy_python.txt && echo "true" > /workspace/deploy_dotnet.txt'

  # Python FastAPI Application Build & Deploy
  - name: 'gcr.io/cloud-builders/docker'
    id: build-python-image
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        mkdir -p User_Server_BH_basic
        cd User_Server_BH_basic
        echo "fastapi==0.95.0" > requirements.txt
        echo "uvicorn==0.21.0" >> requirements.txt
        echo "pydantic==1.10.7" >> requirements.txt
        echo 'from fastapi import FastAPI
app = FastAPI()

@app.get("/")
def read_root():
    return {"message": "Hello World"}' > main.py
        cat > Dockerfile << 'EOF'
FROM python:3.11-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY . .
EXPOSE 8080
ENV PORT=8080
CMD uvicorn main:app --host 0.0.0.0 --port ${PORT:-8080}
EOF
        docker build -t gcr.io/$PROJECT_ID/user-server-bh:$BUILD_ID .

  - name: 'gcr.io/cloud-builders/docker'
    id: push-python-image
    waitFor: ['build-python-image']
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/user-server-bh:$BUILD_ID'

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: deploy-python-app
    waitFor: ['push-python-image']
    entrypoint: 'bash'
    args:
      - '-c'
      - 'gcloud run deploy user-server-bh --image gcr.io/$PROJECT_ID/user-server-bh:$BUILD_ID --region us-central1 --platform managed --allow-unauthenticated'

  # .NET ASP.NET Application Build & Deploy
  - name: 'gcr.io/cloud-builders/docker'
    id: build-dotnet-image
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        mkdir -p DeviceServer
        cd DeviceServer
        cat > DeviceServer.csproj << 'EOF'
<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="8.0.0" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.5.0" />
  </ItemGroup>
</Project>
EOF
        cat > Program.cs << 'EOF'
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
var app = builder.Build();
app.UseSwagger();
app.UseSwaggerUI();
app.MapGet("/", () => "Hello World!");
app.Run();
EOF
        cat > Dockerfile << 'EOF'
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src
COPY *.csproj .
RUN dotnet restore
COPY . .
RUN dotnet publish -c Release -o /app

FROM mcr.microsoft.com/dotnet/aspnet:8.0
WORKDIR /app
COPY --from=build /app .
ENV PORT=8080
EXPOSE 8080
ENV ASPNETCORE_URLS=http://+:${PORT:-8080}
ENTRYPOINT ["dotnet", "DeviceServer.dll"]
EOF
        docker build -t gcr.io/$PROJECT_ID/device-server:$BUILD_ID .

  - name: 'gcr.io/cloud-builders/docker'
    id: push-dotnet-image
    waitFor: ['build-dotnet-image']
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/device-server:$BUILD_ID'

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: deploy-dotnet-app
    waitFor: ['push-dotnet-image']
    entrypoint: 'bash'
    args:
      - '-c'
      - 'gcloud run deploy device-server --image gcr.io/$PROJECT_ID/device-server:$BUILD_ID --region us-central1 --platform managed --allow-unauthenticated'

# Use BUILD_ID for image tags
images:
  - 'gcr.io/$PROJECT_ID/user-server-bh:$BUILD_ID'
  - 'gcr.io/$PROJECT_ID/device-server:$BUILD_ID'

# Specify logging options
options:
  logging: CLOUD_LOGGING_ONLY

# Timeout setting
timeout: '1800s'