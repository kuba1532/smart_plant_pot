# Cloud Build configuration file for dual application deployment
steps:
  # Determine which services to deploy
  - name: 'gcr.io/cloud-builders/git'
    id: check-changes
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Check if Python app directory exists
        if [ -d "User_Server_BH_basic" ]; then
          echo "Python app directory found, will deploy"
          echo "true" > /workspace/deploy_python.txt
        else
          echo "Python app directory not found, skipping"
          echo "false" > /workspace/deploy_python.txt
        fi
        
        # Check if .NET app directory exists
        if [ -d "DeviceServer" ]; then
          echo ".NET app directory found, will deploy"
          echo "true" > /workspace/deploy_dotnet.txt
        else
          echo ".NET app directory not found, skipping"
          echo "false" > /workspace/deploy_dotnet.txt
        fi

  # Python FastAPI Application Build & Deploy
  - name: 'gcr.io/cloud-builders/docker'
    id: build-python-image
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$(cat /workspace/deploy_python.txt)" = "true" ]; then
          cd User_Server_BH_basic
          docker build -t gcr.io/$PROJECT_ID/user-server-bh:$BUILD_ID .
        else
          echo "Skipping Python app build"
        fi

  - name: 'gcr.io/cloud-builders/docker'
    id: push-python-image
    waitFor: ['build-python-image']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$(cat /workspace/deploy_python.txt)" = "true" ]; then
          docker push gcr.io/$PROJECT_ID/user-server-bh:$BUILD_ID
        else
          echo "Skipping Python app push"
        fi

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: deploy-python-app
    waitFor: ['push-python-image']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$(cat /workspace/deploy_python.txt)" = "true" ]; then
          gcloud run deploy user-server-bh \
            --image gcr.io/$PROJECT_ID/user-server-bh:$BUILD_ID \
            --region us-central1 \
            --platform managed \
            --allow-unauthenticated \
            --cpu=1 \
            --memory=512Mi \
            --timeout=300 \
            --min-instances=0 \
            --max-instances=10 \
            --port=8080 \
            --cpu-throttling
        else
          echo "Skipping Python app deployment"
        fi

  # .NET ASP.NET Application Build & Push Only
  - name: 'gcr.io/cloud-builders/docker'
    id: build-dotnet-image
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$(cat /workspace/deploy_dotnet.txt)" = "true" ]; then
          cd DeviceServer
          docker build -t gcr.io/$PROJECT_ID/device-server:$BUILD_ID .
        else
          echo "Skipping .NET app build"
        fi

  - name: 'gcr.io/cloud-builders/docker'
    id: push-dotnet-image
    waitFor: ['build-dotnet-image']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$(cat /workspace/deploy_dotnet.txt)" = "true" ]; then
          docker push gcr.io/$PROJECT_ID/device-server:$BUILD_ID
        else
          echo "Skipping .NET app push"
        fi

  # Deploy to Compute Engine with auto-restart
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: deploy-dotnet-gce
    waitFor: ['push-dotnet-image']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$(cat /workspace/deploy_dotnet.txt)" = "true" ]; then
          # Create a persistent volume for certificates if it doesn't exist
          gcloud compute ssh dotnet-vm2 --zone us-central1-c --command="
            mkdir -p ~/device-server-certs
            
            # Generate certificate if it doesn't exist
            if [ ! -f ~/device-server-certs/certificate.pfx ]; then
              cd ~/device-server-certs
              openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes -subj \"/CN=device-server\" -batch
              openssl pkcs12 -export -out certificate.pfx -inkey key.pem -in cert.pem -passout pass:
              echo 'Certificate generated'
            else
              echo 'Certificate already exists'
            fi
          "
          
          # Deploy with auto-restart enabled
          gcloud compute ssh dotnet-vm2 --zone us-central1-c --command="
            gcloud auth configure-docker -q &&
            docker pull gcr.io/$PROJECT_ID/device-server:$BUILD_ID &&
            docker stop device-server || true &&
            docker rm device-server || true &&
            docker run -d --name device-server \
              --restart always \
              -p 80:8080 \
              -p 443:8443 \
              -v ~/device-server-certs:/app/certs \
              gcr.io/$PROJECT_ID/device-server:$BUILD_ID
          "
          
          # Verify the deployment
          gcloud compute ssh dotnet-vm2 --zone us-central1-c --command="
            docker ps | grep device-server
          "
        else
          echo "Skipping .NET app deployment to GCE"
        fi

  # Add a step to ensure firewall rules are set up correctly
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: setup-firewall
    waitFor: ['deploy-dotnet-gce']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$(cat /workspace/deploy_dotnet.txt)" = "true" ]; then
          # Check if HTTPS firewall rule exists, create if not
          if ! gcloud compute firewall-rules describe allow-https --quiet 2>/dev/null; then
            gcloud compute firewall-rules create allow-https \
              --allow tcp:443 \
              --description "Allow HTTPS traffic" \
              --direction INGRESS
            echo "Created HTTPS firewall rule"
          else
            echo "HTTPS firewall rule already exists"
          fi
        else
          echo "Skipping firewall rule setup"
        fi

# Images to be built
images:
  - 'gcr.io/$PROJECT_ID/user-server-bh:$BUILD_ID'
  - 'gcr.io/$PROJECT_ID/device-server:$BUILD_ID'

# Configure logging
options:
  logging: CLOUD_LOGGING_ONLY

# Timeout setting
timeout: '1800s'