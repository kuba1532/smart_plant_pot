# Cloud Build configuration file for dual application deployment
steps:
  # Determine which services to deploy
  - name: 'gcr.io/cloud-builders/git'
    id: check-changes
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Check if Python app directory exists
        if [ -d "User_Server_BH_basic" ]; then
          echo "Python app directory found, will deploy"
          echo "true" > /workspace/deploy_python.txt
        else
          echo "Python app directory not found, skipping"
          echo "false" > /workspace/deploy_python.txt
        fi
        
        # Check if .NET app directory exists
        if [ -d "DeviceServer" ]; then
          echo ".NET app directory found, will deploy"
          echo "true" > /workspace/deploy_dotnet.txt
        else
          echo ".NET app directory not found, skipping"
          echo "false" > /workspace/deploy_dotnet.txt
        fi

  # Python FastAPI Application Build & Deploy
  - name: 'gcr.io/cloud-builders/docker'
    id: build-python-image
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$(cat /workspace/deploy_python.txt)" = "true" ]; then
          cd User_Server_BH_basic
          docker build -t gcr.io/$PROJECT_ID/user-server-bh:$BUILD_ID .
        else
          echo "Skipping Python app build"
        fi

  - name: 'gcr.io/cloud-builders/docker'
    id: push-python-image
    waitFor: ['build-python-image']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$(cat /workspace/deploy_python.txt)" = "true" ]; then
          docker push gcr.io/$PROJECT_ID/user-server-bh:$BUILD_ID
        else
          echo "Skipping Python app push"
        fi

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: deploy-python-app
    waitFor: ['push-python-image']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$(cat /workspace/deploy_python.txt)" = "true" ]; then
          gcloud run deploy user-server-bh \
            --image gcr.io/$PROJECT_ID/user-server-bh:$BUILD_ID \
            --region us-central1 \
            --platform managed \
            --allow-unauthenticated
        else
          echo "Skipping Python app deployment"
        fi

  # .NET ASP.NET Application Build & Deploy
  - name: 'gcr.io/cloud-builders/docker'
    id: build-dotnet-image
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$(cat /workspace/deploy_dotnet.txt)" = "true" ]; then
          cd DeviceServer
          docker build -t gcr.io/$PROJECT_ID/device-server:$BUILD_ID .
        else
          echo "Skipping .NET app build"
        fi

  - name: 'gcr.io/cloud-builders/docker'
    id: push-dotnet-image
    waitFor: ['build-dotnet-image']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$(cat /workspace/deploy_dotnet.txt)" = "true" ]; then
          docker push gcr.io/$PROJECT_ID/device-server:$BUILD_ID
        else
          echo "Skipping .NET app push"
        fi

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: deploy-dotnet-app
    waitFor: ['push-dotnet-image']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$(cat /workspace/deploy_dotnet.txt)" = "true" ]; then
          gcloud run deploy device-server \
            --image gcr.io/$PROJECT_ID/device-server:$BUILD_ID \
            --region us-central1 \
            --platform managed \
            --allow-unauthenticated
        else
          echo "Skipping .NET app deployment"
        fi

# Images to be built
images:
  - 'gcr.io/$PROJECT_ID/user-server-bh:$BUILD_ID'
  - 'gcr.io/$PROJECT_ID/device-server:$BUILD_ID'

# Configure logging
options:
  logging: CLOUD_LOGGING_ONLY

# Timeout setting
timeout: '1800s'